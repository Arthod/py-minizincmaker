predicate fzn_decreasing_int(array [int] of var int: x);
array [1..3] of int: X_INTRODUCED_10_ = [1,-1,-1];
array [1..2] of int: X_INTRODUCED_16_ = [1,1];
var 1..2: bin_load_0:: is_defined_var:: output_var;
var 0..2: bin_load_1:: is_defined_var:: output_var;
var bool: bin_item_0_0:: output_var;
var bool: bin_item_0_1:: output_var;
var bool: bin_item_1_0:: output_var;
var bool: bin_item_1_1:: output_var;
var 0..2: X_INTRODUCED_0_:: is_defined_var;
var bool: X_INTRODUCED_1_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_5_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_7_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_8_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_11_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_12_ ::var_is_introduced :: is_defined_var;
array [1..2] of var int: X_INTRODUCED_6_ ::var_is_introduced  = [bin_load_0,bin_load_1];
constraint fzn_decreasing_int(X_INTRODUCED_6_);
constraint int_lin_eq(X_INTRODUCED_10_,[bin_load_0,X_INTRODUCED_8_,X_INTRODUCED_7_],0):: defines_var(bin_load_0);
constraint int_lin_eq(X_INTRODUCED_10_,[bin_load_1,X_INTRODUCED_12_,X_INTRODUCED_11_],0):: defines_var(bin_load_1);
constraint int_lin_eq(X_INTRODUCED_16_,[X_INTRODUCED_8_,X_INTRODUCED_12_],1);
constraint int_lin_eq(X_INTRODUCED_16_,[X_INTRODUCED_7_,X_INTRODUCED_11_],1);
constraint int_lin_eq([1,-1],[X_INTRODUCED_5_,X_INTRODUCED_0_],-1):: defines_var(X_INTRODUCED_0_):: ctx_neg;
constraint int_le_reif(1,bin_load_1,X_INTRODUCED_1_):: defines_var(X_INTRODUCED_1_);
constraint bool2int(X_INTRODUCED_1_,X_INTRODUCED_5_):: defines_var(X_INTRODUCED_5_);
constraint bool2int(bin_item_0_1,X_INTRODUCED_7_):: defines_var(X_INTRODUCED_7_);
constraint bool2int(bin_item_0_0,X_INTRODUCED_8_):: defines_var(X_INTRODUCED_8_);
constraint bool2int(bin_item_1_1,X_INTRODUCED_11_):: defines_var(X_INTRODUCED_11_);
constraint bool2int(bin_item_1_0,X_INTRODUCED_12_):: defines_var(X_INTRODUCED_12_);
solve  minimize X_INTRODUCED_0_;
